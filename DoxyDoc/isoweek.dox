// -*- mode: C; c-file-style: "bsd"; c-basic-offset: 4; fill-column: 98; coding: utf-8-unix; -*-
// ----------------------------------------------------------------------------------------------
// µCal by J.Perlinger (perlinger@nwtime.org)
//
// To the extent possible under law, the person who associated CC0 with
// µCal has waived all copyright and related or neighboring rights
// to µCal.
//
// You should have received a copy of the CC0 legalcode along with this
// work.  If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
// ----------------------------------------------------------------------------------------------
// µCal -- a small calendar component in C99
// Written anno 2024 by J.Perlinger (perlinger@nwtime.org)
//
// This file is part of the Doxygen documentation.
// ----------------------------------------------------------------------------------------------

/*! \page isocal ISO8601 Week Calendar

The basic definition boils down to this:

 + The year in the ISO Week Calendar starts a the Monday closest to Jan,1st if the Gregorian Calendar
   year with the same number. (Obviously, this might be _before_ the start of a Gregorian year.)
 + As a result, the year has 52 or 53 full weeks.

There are three nice properties of this calendar:

 + Since the Gregorian calendar has a period of 400 years, so has the ISO8601 Week Calendar.
 + Since 0001-01-01 is a Monday, there's no cycle shift: For any quadricentennial year,
   yyyy-w1-1 and yyyy-01-01 are the same day.
 + Since it is week-aligned, we can use weeks instead of days as basic calendar units, reducing
   the numeric range we have to deal with.

We further observe that a full 400-year cycle takes 20871 weeks, with century lengths of
5218, 5217, 5218 and 5218 weeks.  (There _has_ to be a glitch somewhere, right?)


\section iwcal_yearstart Start of a Year to Rata Die

In this direction we can directly use the Gregorian calendar, as we have functions to calculate
the start of a year as RDN and functions to find any given day-of-week closest to this day.
Calculating the Monday closest to the start of a Gregorian Calendar year is easy.

There's another way that is more arcane, but has its counterpart in the split of weeks.  It is based
on the inspection of the tabulated data for 400 years, and similar to the tabulated data for the
conversion from months to a days and reverse, there's a way that does linear interpolation.

First we split the years into centuries and years in centuries. Converting centuries to weeks is
simple: Multiply with 5218, and remove 1 in 4 centuries for the defective 2nd cycle.

Now we have to treat the years in a century by a linear interpolation. Unfortunately, this needs
a small table of 4 numbers: While the multiplier and divider (the slope) can be the same for
all centuries, the offset (phase shift) needs to be chosen according to the index of a century
in the 4-century cycle.  The centennial and quadricentennial leap year rules get in the way here.

So, with
 + \f$q_c, r_c\f$ as elapsed centuries and years in century
 + \f$c_s,c_i\f$ as cycle shift and cycle index
 + \f$w_c\f$ as weeks in century
 
let us calulate:

\f{eqnarray*}{
    q_c,r_c & \gets & \left \lfloor \frac{Y-1}{100} \right \rfloor \\
    c_s     & \gets & \left \lfloor \frac{q_c + 2}{4} \right \rfloor \\
    c_i     & \gets & q_c \bmod{4} \\
    w_c     & \gets & \left \lfloor \frac{5431 r_c + (448,160,896,608)[c_i]}{1024} \right \rfloor \\
    RDN     & \gets & 7 (5218 q_c - c_s + w_c) + 1 
\f}

Looking close, there's only _one_ division that cannot be expressed by arithmetic shift, and
that's the initial division by 100. 

\section iwcal_weeksplit Splitting Rata Die to Year and Week-in-Year

Expressing this calculation in terms of the Gregorian is possible and instructional.  It even
makes for a decent reference implementation.  The point where it lacks elegance is that it has to
be a trial-and-search algorithm, since the year starts of Gregorian and Week calendar are only
roughly aligned.

Inspection of the tabulated data for 4 centuries show another way to calculate the ISO8601 Week
Date from a linear day count.

Since the Week Calendar is, well, week-aligned, we can do a floor division by 7 to get the number
of weeks elapsed since epoch first. Then the remaining calculations are all centered on weeks.

So, with
 + \f$w, d_w\f$ as weeks since epoch and days since start-of-week
 + \f$q_c, r_c\f$ as elapsed centuries and scaled weeks in century
 + \f$q_y,w'\f$ as years in century and modified weeks in year

let us calulate:

\f{eqnarray*}{
    w,d_w   & \gets & \left \lfloor \frac{RDN-1}{7} \right \rfloor \\
    q_c,r_c & \gets & \left \lfloor \frac{4 w + 2}{20871} \right \rfloor \\
    q_y,w'  & \gets & \left \lfloor \frac{
                  157 \left\lfloor\frac{r_c}{4}\right\rfloor + (84,128,16,62)[q_c \bmod{4}]
                }{8192} \right \rfloor \\
    D & \gets & d_w + 1 \\
    W & \gets & \left\lfloor\frac{w'}{157}\right\rfloor + 1 \\
    Y & \gets & 100 q_c + q_y + 1
\f}

That's the fastest way to go through the ISO8601 Week Calendar I've seen so far.

*/
// -*- that's all folks -*-
