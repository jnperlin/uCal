// -*- mode: C; c-file-style: "bsd"; c-basic-offset: 4; fill-column: 98; coding: utf-8-unix; -*-
// ----------------------------------------------------------------------------------------------
// µCal by J.Perlinger (perlinger@nwtime.org)
//
// To the extent possible under law, the person who associated CC0 with
// µCal has waived all copyright and related or neighboring rights
// to µCal.
//
// You should have received a copy of the CC0 legalcode along with this
// work.  If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
// ----------------------------------------------------------------------------------------------
// µCal -- a small calendar component in C99
// Written anno 2024 by J.Perlinger (perlinger@nwtime.org)
//
// This file is part of the Doxygen documentation.
// ----------------------------------------------------------------------------------------------

/*! \page implementation Implementation Details

\section floordiv Floor Division

We have to execute a great number of division operations when doing calendar math.
While the dividers are are always positive constants (some kind of period / duration),
the dividend is often a signed quantity.

Many C compilers can code division by a constant quite effective, but the division rules
for C are always rounding towards zero.  Which is not exactly what we need -- calendar
calculations need floor division, rounding towards negative infinity.  (Which _is_ the same
for positive numbers, of course.)

There is an old (but possibly not widely known) trick to implement floor division for negative
dividends and positive dividers:  The (floor) quotient is the one's complement of the one's
complement of the dividend, divided by the divider.  This can be done either by branching,
or by doing the calculations entirely with unsigned quantities and an XOR mask.  This permits
branch-free code, at least on the 'C' level.  So, to evaluate
\f$ q \gets \left \lfloor \frac{n}{d} \right \rfloor \f$ we can do:

\code{".c"}
    signed   int n;
    unsigned int d, q, m, r;
    m = -(n < 0);           // sign flip mask, 0 or 0xFFF...FFF
    q = m ^ ((m ^ n) / d);  // direct or one's complement division
    r = n - q * d;          // remainder, 0 <= r < d
\endcode

Since \f$ |q| < |n| \; \forall \: |d| > 1 \f$, the quotient will also fit into the type of `n`.

This scheme obviously expands to _all_ integral types -- one just has to find an unsigned integral
type that is at least as wide as the dividend!  Which can be a bit of a pain when the exact type
is not known and there's no standardized definition of an unsigned counterpart.  Yes, we're
talking about @c time_t here.


\section extdiv Extended Division

Most cycles we have to deal with in calendar and/or time calculations fit int `uint32_t`:
Seconds of a day or a GPS era, days in a week/month/year/century, etc.  But if we get
a `time_t` value with 64 bits, some extra care is warranted for 32bit target architectures:
In most cases the compiler will divide `int64_t` by a call to some library function or
emitting code for a DIV instruction.  This cannot make use of the constant nature of the
divider and typically result in less-than-perfect execution times.

In our case, we use the extended division as prescribed in the paper of Torbjörn Granlund
and Niels Möller. It needs three numbers: The normalised divider, an approximation of the
inverse, and a shift width.  These can be established without great difficulties and directly
used in a call to the core division function.

It doesn't make the nicest for reading in the source code, but calendar calculations are littered
with magic constants anyway.  We can live with a few more obscure numbers if we can avoid
slow runtime functions with them.


\section intcast Integer Conversions

Conversion from a value \f$x_s\f$ of any signed integral type to a value \f$x_u\f$ of an unsigned
type with \f$N\f$ bits is well-defined:

\f[  x_u \equiv x_s \pmod{2^N} \f]

The C standard uses a very verbose description in a somewhat obscure wording that boils exactly down
to taking the input value modulo \f$2^N\f$ -- but it has to be the mathematical modulus, _not_ the
modulo operator of the C language!

The reverse operation is not so easy. The standard says for a conversion from unsigned to signed: "If the
source value is not representable in the destination type, the result is implementation-defined."
And implementation-defined means that the compiler can do as he likes, and even raise a trap (signal).
It just has to document it and stick to the rule it made.

Basically, this means that for a conversion from `unsigned int` to `signed int` the result is
compiler-defined for all values greater than `INT_MAX`.  While most compiler define this as a simple
pattern-preserving copy operation, it just doesn't have be this way. And there's no really universally
portable way out of this, as the permitted representation of negative integral values can be one
of three choices: two's complement, one's complement, and sign/magnitude. And for the last two, there's
one value (not bit pattern!) that cannot be represented...

These days, anything but two's complement machines is of purely historical interest. And if we restrict
ourselves to two's complement architectures, the issue _can_ be solved. Consider the following:

\code{".c"}
    signed   int s;
    unsigned int u;
    s = (u > INT_MAX) ? -(int)~u - 1 : (int)u;
\endcode

If `u` fits into the positive range of `int`, the 2nd branch of the ternary operation simply casts the value.
No issues here, as the surce value is representable in the target type.

The other branch is more interesting: It first inverts the bit pattern, which toggles the sign bit. This
(now non-negative) value clearly fits into an integer, so the cast to `int` leaves no room for interpretations.
The value is also small enough that the following negation cannot produce an integer overflow condition.
(That would be undefined behavior by the standard!) And thanks to the asymmetric range of two's complement
signed integers the final subtraction cannot cause signed integer overflow, either.

If you look at the bit patterns involved, you can see that the resulting signed integer has the same
bit pattern as the unsigned source value. The ternary expression just removes all freedom the compiler
would have had in a straight cast, forcing the pattern-preserving behavior in all cases.

Ok, and how much does it cost, CPU-wise? And here the fun starts... at least GCC and CLANG recognise
the ternary expression as a pattern-preserving copy. So the whole expression results in a NOP or a MOVE,
at least when optimising!


\section intasr Arithmetic Shift right

The "C" standard leaves it to the compiler whether right shift of integers is logic or arithmetic. While
it is possible to fully emulate arithmetic right shift, it's a real pain.  In some sense, it's a bit like
integer casting: It becomes feasible once we restrict the code to work on two's complement machines.

Efectively, we can use the preprocessor to find out: The preprocessor must evaluate numeric expressions
following _exactly_ the same rules the compiler applies to the evaluation of constant expressions, and
_this_ evaluation must yield the same results as the target would yield when doing the calculations
at runtime!

So a simple check with the preprocessor is sufficient: Only on machines with arithmetic
right shift ` -1 == (-1 >> 1) ` can be true. (It doesn't matter if the silicone does it itself or if the
compiler emits code to emulate this -- from high level the right shift _is_ aritmetic!)

If the shift is logic, we can use a mask/shift/mask sequence that emulates arithmetic shift
_on two's complement targets_.  Not that we expect to see anything else these days.


\section calcperf Runtime Performance

There's little performance test tool included (test-perf) that does a ~400000 roundtrip calculations
from a \c time_t value to civil date back to \c time_t seconds.  The roundtrip is implemented in two
ways: Using the functions from this module and using the \c gmtime() / \c timegm() pair from the
(GLIBC) "C" runtime.

This rough measurement shows a speed gain factor of ~3.5 over the "C" runtime on an older XEON CPU
when compiled as 64bit binary with CLANG-18 and \c -o2.  On an Raspi3 (32bit mode, CLANG-18, \c -o2)
the speed gain is a factor of even ~6.0!  (For 64-bit \c time_t on both platforms, of course.
It seems that optimising the extended divisions pays off well.)

*/
// -*- that's all folks -*-
